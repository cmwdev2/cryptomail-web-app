/* eslint-disable */
//@ts-nocheck
// source: types/content.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var types_types_pb = require('../types/types_pb.js');
goog.object.extend(proto, types_types_pb);
goog.exportSymbol('proto.types.ContentItem', null, global);
goog.exportSymbol('proto.types.DepositData', null, global);
goog.exportSymbol('proto.types.Message', null, global);
goog.exportSymbol('proto.types.MessageContent', null, global);
goog.exportSymbol('proto.types.MessageKey', null, global);
goog.exportSymbol('proto.types.MessageKeys', null, global);
goog.exportSymbol('proto.types.MessageServerData', null, global);
goog.exportSymbol('proto.types.MessageUserdata', null, global);
goog.exportSymbol('proto.types.MessagesIds', null, global);
goog.exportSymbol('proto.types.Thread', null, global);
goog.exportSymbol('proto.types.ThreadBox', null, global);
goog.exportSymbol('proto.types.ThreadBoxType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Message.displayName = 'proto.types.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.MessageUserdata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.MessageUserdata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.MessageUserdata.displayName = 'proto.types.MessageUserdata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.MessagesIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.MessagesIds.repeatedFields_, null);
};
goog.inherits(proto.types.MessagesIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.MessagesIds.displayName = 'proto.types.MessagesIds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.MessageKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.MessageKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.MessageKey.displayName = 'proto.types.MessageKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.MessageKeys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.MessageKeys.repeatedFields_, null);
};
goog.inherits(proto.types.MessageKeys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.MessageKeys.displayName = 'proto.types.MessageKeys';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.MessageServerData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.MessageServerData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.MessageServerData.displayName = 'proto.types.MessageServerData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.DepositData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.DepositData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.DepositData.displayName = 'proto.types.DepositData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Thread = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.Thread.repeatedFields_, null);
};
goog.inherits(proto.types.Thread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Thread.displayName = 'proto.types.Thread';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.ThreadBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.ThreadBox.repeatedFields_, null);
};
goog.inherits(proto.types.ThreadBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.ThreadBox.displayName = 'proto.types.ThreadBox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.MessageContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.MessageContent.repeatedFields_, null);
};
goog.inherits(proto.types.MessageContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.MessageContent.displayName = 'proto.types.MessageContent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.ContentItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.ContentItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.ContentItem.displayName = 'proto.types.ContentItem';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: (f = msg.getMessageId()) && types_types_pb.MessageId.toObject(includeInstance, f),
    authorData: msg.getAuthorData_asB64(),
    serverData: (f = msg.getServerData()) && proto.types.MessageServerData.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Message}
 */
proto.types.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Message;
  return proto.types.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Message}
 */
proto.types.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_types_pb.MessageId;
      reader.readMessage(value,types_types_pb.MessageId.deserializeBinaryFromReader);
      msg.setMessageId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthorData(value);
      break;
    case 3:
      var value = new proto.types.MessageServerData;
      reader.readMessage(value,proto.types.MessageServerData.deserializeBinaryFromReader);
      msg.setServerData(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_types_pb.MessageId.serializeBinaryToWriter
    );
  }
  f = message.getAuthorData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getServerData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.types.MessageServerData.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional MessageId message_id = 1;
 * @return {?proto.types.MessageId}
 */
proto.types.Message.prototype.getMessageId = function() {
  return /** @type{?proto.types.MessageId} */ (
    jspb.Message.getWrapperField(this, types_types_pb.MessageId, 1));
};


/**
 * @param {?proto.types.MessageId|undefined} value
 * @return {!proto.types.Message} returns this
*/
proto.types.Message.prototype.setMessageId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.Message} returns this
 */
proto.types.Message.prototype.clearMessageId = function() {
  return this.setMessageId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.Message.prototype.hasMessageId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes author_data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.Message.prototype.getAuthorData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes author_data = 2;
 * This is a type-conversion wrapper around `getAuthorData()`
 * @return {string}
 */
proto.types.Message.prototype.getAuthorData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthorData()));
};


/**
 * optional bytes author_data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthorData()`
 * @return {!Uint8Array}
 */
proto.types.Message.prototype.getAuthorData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthorData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.Message} returns this
 */
proto.types.Message.prototype.setAuthorData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional MessageServerData server_data = 3;
 * @return {?proto.types.MessageServerData}
 */
proto.types.Message.prototype.getServerData = function() {
  return /** @type{?proto.types.MessageServerData} */ (
    jspb.Message.getWrapperField(this, proto.types.MessageServerData, 3));
};


/**
 * @param {?proto.types.MessageServerData|undefined} value
 * @return {!proto.types.Message} returns this
*/
proto.types.Message.prototype.setServerData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.Message} returns this
 */
proto.types.Message.prototype.clearServerData = function() {
  return this.setServerData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.Message.prototype.hasServerData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.types.Message.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.types.Message.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.types.Message.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.Message} returns this
 */
proto.types.Message.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.MessageUserdata.prototype.toObject = function(opt_includeInstance) {
  return proto.types.MessageUserdata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.MessageUserdata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessageUserdata.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: (f = msg.getMessageId()) && types_types_pb.MessageId.toObject(includeInstance, f),
    senderPublicKey: (f = msg.getSenderPublicKey()) && types_types_pb.PublicKey.toObject(includeInstance, f),
    created: jspb.Message.getFieldWithDefault(msg, 3, 0),
    payment: (f = msg.getPayment()) && types_types_pb.Payment.toObject(includeInstance, f),
    replyTo: msg.getReplyTo_asB64(),
    recipientPublicKey: (f = msg.getRecipientPublicKey()) && types_types_pb.PublicKey.toObject(includeInstance, f),
    ephPubKey: (f = msg.getEphPubKey()) && types_types_pb.PublicKey.toObject(includeInstance, f),
    recipientPreKeyId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.MessageUserdata}
 */
proto.types.MessageUserdata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.MessageUserdata;
  return proto.types.MessageUserdata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.MessageUserdata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.MessageUserdata}
 */
proto.types.MessageUserdata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_types_pb.MessageId;
      reader.readMessage(value,types_types_pb.MessageId.deserializeBinaryFromReader);
      msg.setMessageId(value);
      break;
    case 2:
      var value = new types_types_pb.PublicKey;
      reader.readMessage(value,types_types_pb.PublicKey.deserializeBinaryFromReader);
      msg.setSenderPublicKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreated(value);
      break;
    case 4:
      var value = new types_types_pb.Payment;
      reader.readMessage(value,types_types_pb.Payment.deserializeBinaryFromReader);
      msg.setPayment(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReplyTo(value);
      break;
    case 6:
      var value = new types_types_pb.PublicKey;
      reader.readMessage(value,types_types_pb.PublicKey.deserializeBinaryFromReader);
      msg.setRecipientPublicKey(value);
      break;
    case 7:
      var value = new types_types_pb.PublicKey;
      reader.readMessage(value,types_types_pb.PublicKey.deserializeBinaryFromReader);
      msg.setEphPubKey(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRecipientPreKeyId(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.MessageUserdata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.MessageUserdata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.MessageUserdata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessageUserdata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_types_pb.MessageId.serializeBinaryToWriter
    );
  }
  f = message.getSenderPublicKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_types_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPayment();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      types_types_pb.Payment.serializeBinaryToWriter
    );
  }
  f = message.getReplyTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getRecipientPublicKey();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      types_types_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getEphPubKey();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      types_types_pb.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getRecipientPreKeyId();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional MessageId message_id = 1;
 * @return {?proto.types.MessageId}
 */
proto.types.MessageUserdata.prototype.getMessageId = function() {
  return /** @type{?proto.types.MessageId} */ (
    jspb.Message.getWrapperField(this, types_types_pb.MessageId, 1));
};


/**
 * @param {?proto.types.MessageId|undefined} value
 * @return {!proto.types.MessageUserdata} returns this
*/
proto.types.MessageUserdata.prototype.setMessageId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.MessageUserdata} returns this
 */
proto.types.MessageUserdata.prototype.clearMessageId = function() {
  return this.setMessageId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MessageUserdata.prototype.hasMessageId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicKey sender_public_key = 2;
 * @return {?proto.types.PublicKey}
 */
proto.types.MessageUserdata.prototype.getSenderPublicKey = function() {
  return /** @type{?proto.types.PublicKey} */ (
    jspb.Message.getWrapperField(this, types_types_pb.PublicKey, 2));
};


/**
 * @param {?proto.types.PublicKey|undefined} value
 * @return {!proto.types.MessageUserdata} returns this
*/
proto.types.MessageUserdata.prototype.setSenderPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.MessageUserdata} returns this
 */
proto.types.MessageUserdata.prototype.clearSenderPublicKey = function() {
  return this.setSenderPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MessageUserdata.prototype.hasSenderPublicKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 created = 3;
 * @return {number}
 */
proto.types.MessageUserdata.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.MessageUserdata} returns this
 */
proto.types.MessageUserdata.prototype.setCreated = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Payment payment = 4;
 * @return {?proto.types.Payment}
 */
proto.types.MessageUserdata.prototype.getPayment = function() {
  return /** @type{?proto.types.Payment} */ (
    jspb.Message.getWrapperField(this, types_types_pb.Payment, 4));
};


/**
 * @param {?proto.types.Payment|undefined} value
 * @return {!proto.types.MessageUserdata} returns this
*/
proto.types.MessageUserdata.prototype.setPayment = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.MessageUserdata} returns this
 */
proto.types.MessageUserdata.prototype.clearPayment = function() {
  return this.setPayment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MessageUserdata.prototype.hasPayment = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes reply_to = 5;
 * @return {!(string|Uint8Array)}
 */
proto.types.MessageUserdata.prototype.getReplyTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes reply_to = 5;
 * This is a type-conversion wrapper around `getReplyTo()`
 * @return {string}
 */
proto.types.MessageUserdata.prototype.getReplyTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReplyTo()));
};


/**
 * optional bytes reply_to = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReplyTo()`
 * @return {!Uint8Array}
 */
proto.types.MessageUserdata.prototype.getReplyTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReplyTo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.MessageUserdata} returns this
 */
proto.types.MessageUserdata.prototype.setReplyTo = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional PublicKey recipient_public_key = 6;
 * @return {?proto.types.PublicKey}
 */
proto.types.MessageUserdata.prototype.getRecipientPublicKey = function() {
  return /** @type{?proto.types.PublicKey} */ (
    jspb.Message.getWrapperField(this, types_types_pb.PublicKey, 6));
};


/**
 * @param {?proto.types.PublicKey|undefined} value
 * @return {!proto.types.MessageUserdata} returns this
*/
proto.types.MessageUserdata.prototype.setRecipientPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.MessageUserdata} returns this
 */
proto.types.MessageUserdata.prototype.clearRecipientPublicKey = function() {
  return this.setRecipientPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MessageUserdata.prototype.hasRecipientPublicKey = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PublicKey eph_pub_key = 7;
 * @return {?proto.types.PublicKey}
 */
proto.types.MessageUserdata.prototype.getEphPubKey = function() {
  return /** @type{?proto.types.PublicKey} */ (
    jspb.Message.getWrapperField(this, types_types_pb.PublicKey, 7));
};


/**
 * @param {?proto.types.PublicKey|undefined} value
 * @return {!proto.types.MessageUserdata} returns this
*/
proto.types.MessageUserdata.prototype.setEphPubKey = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.MessageUserdata} returns this
 */
proto.types.MessageUserdata.prototype.clearEphPubKey = function() {
  return this.setEphPubKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MessageUserdata.prototype.hasEphPubKey = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 recipient_pre_key_id = 8;
 * @return {number}
 */
proto.types.MessageUserdata.prototype.getRecipientPreKeyId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.MessageUserdata} returns this
 */
proto.types.MessageUserdata.prototype.setRecipientPreKeyId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes content = 9;
 * @return {!(string|Uint8Array)}
 */
proto.types.MessageUserdata.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes content = 9;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.types.MessageUserdata.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.types.MessageUserdata.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.MessageUserdata} returns this
 */
proto.types.MessageUserdata.prototype.setContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.MessagesIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.MessagesIds.prototype.toObject = function(opt_includeInstance) {
  return proto.types.MessagesIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.MessagesIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessagesIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesIdsList: jspb.Message.toObjectList(msg.getMessagesIdsList(),
    types_types_pb.MessageId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.MessagesIds}
 */
proto.types.MessagesIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.MessagesIds;
  return proto.types.MessagesIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.MessagesIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.MessagesIds}
 */
proto.types.MessagesIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_types_pb.MessageId;
      reader.readMessage(value,types_types_pb.MessageId.deserializeBinaryFromReader);
      msg.addMessagesIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.MessagesIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.MessagesIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.MessagesIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessagesIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesIdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      types_types_pb.MessageId.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MessageId messages_ids = 1;
 * @return {!Array<!proto.types.MessageId>}
 */
proto.types.MessagesIds.prototype.getMessagesIdsList = function() {
  return /** @type{!Array<!proto.types.MessageId>} */ (
    jspb.Message.getRepeatedWrapperField(this, types_types_pb.MessageId, 1));
};


/**
 * @param {!Array<!proto.types.MessageId>} value
 * @return {!proto.types.MessagesIds} returns this
*/
proto.types.MessagesIds.prototype.setMessagesIdsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.MessageId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.MessageId}
 */
proto.types.MessagesIds.prototype.addMessagesIds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.MessageId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.MessagesIds} returns this
 */
proto.types.MessagesIds.prototype.clearMessagesIdsList = function() {
  return this.setMessagesIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.MessageKey.prototype.toObject = function(opt_includeInstance) {
  return proto.types.MessageKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.MessageKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessageKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && types_types_pb.MessageId.toObject(includeInstance, f),
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.MessageKey}
 */
proto.types.MessageKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.MessageKey;
  return proto.types.MessageKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.MessageKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.MessageKey}
 */
proto.types.MessageKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_types_pb.MessageId;
      reader.readMessage(value,types_types_pb.MessageId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.MessageKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.MessageKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.MessageKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessageKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_types_pb.MessageId.serializeBinaryToWriter
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional MessageId id = 1;
 * @return {?proto.types.MessageId}
 */
proto.types.MessageKey.prototype.getId = function() {
  return /** @type{?proto.types.MessageId} */ (
    jspb.Message.getWrapperField(this, types_types_pb.MessageId, 1));
};


/**
 * @param {?proto.types.MessageId|undefined} value
 * @return {!proto.types.MessageKey} returns this
*/
proto.types.MessageKey.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.MessageKey} returns this
 */
proto.types.MessageKey.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MessageKey.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.MessageKey.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.types.MessageKey.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.types.MessageKey.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.MessageKey} returns this
 */
proto.types.MessageKey.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.MessageKeys.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.MessageKeys.prototype.toObject = function(opt_includeInstance) {
  return proto.types.MessageKeys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.MessageKeys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessageKeys.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageKeysList: jspb.Message.toObjectList(msg.getMessageKeysList(),
    proto.types.MessageKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.MessageKeys}
 */
proto.types.MessageKeys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.MessageKeys;
  return proto.types.MessageKeys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.MessageKeys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.MessageKeys}
 */
proto.types.MessageKeys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.MessageKey;
      reader.readMessage(value,proto.types.MessageKey.deserializeBinaryFromReader);
      msg.addMessageKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.MessageKeys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.MessageKeys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.MessageKeys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessageKeys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.MessageKey.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MessageKey message_keys = 1;
 * @return {!Array<!proto.types.MessageKey>}
 */
proto.types.MessageKeys.prototype.getMessageKeysList = function() {
  return /** @type{!Array<!proto.types.MessageKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.MessageKey, 1));
};


/**
 * @param {!Array<!proto.types.MessageKey>} value
 * @return {!proto.types.MessageKeys} returns this
*/
proto.types.MessageKeys.prototype.setMessageKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.MessageKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.MessageKey}
 */
proto.types.MessageKeys.prototype.addMessageKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.MessageKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.MessageKeys} returns this
 */
proto.types.MessageKeys.prototype.clearMessageKeysList = function() {
  return this.setMessageKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.MessageServerData.prototype.toObject = function(opt_includeInstance) {
  return proto.types.MessageServerData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.MessageServerData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessageServerData.toObject = function(includeInstance, msg) {
  var f, obj = {
    opened: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    replied: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    depositData: (f = msg.getDepositData()) && proto.types.DepositData.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.MessageServerData}
 */
proto.types.MessageServerData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.MessageServerData;
  return proto.types.MessageServerData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.MessageServerData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.MessageServerData}
 */
proto.types.MessageServerData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOpened(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReplied(value);
      break;
    case 3:
      var value = new proto.types.DepositData;
      reader.readMessage(value,proto.types.DepositData.deserializeBinaryFromReader);
      msg.setDepositData(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.MessageServerData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.MessageServerData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.MessageServerData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessageServerData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpened();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getReplied();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDepositData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.types.DepositData.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bool opened = 1;
 * @return {boolean}
 */
proto.types.MessageServerData.prototype.getOpened = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.MessageServerData} returns this
 */
proto.types.MessageServerData.prototype.setOpened = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool replied = 2;
 * @return {boolean}
 */
proto.types.MessageServerData.prototype.getReplied = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.types.MessageServerData} returns this
 */
proto.types.MessageServerData.prototype.setReplied = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional DepositData deposit_data = 3;
 * @return {?proto.types.DepositData}
 */
proto.types.MessageServerData.prototype.getDepositData = function() {
  return /** @type{?proto.types.DepositData} */ (
    jspb.Message.getWrapperField(this, proto.types.DepositData, 3));
};


/**
 * @param {?proto.types.DepositData|undefined} value
 * @return {!proto.types.MessageServerData} returns this
*/
proto.types.MessageServerData.prototype.setDepositData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.MessageServerData} returns this
 */
proto.types.MessageServerData.prototype.clearDepositData = function() {
  return this.setDepositData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MessageServerData.prototype.hasDepositData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.types.MessageServerData.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.types.MessageServerData.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.types.MessageServerData.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.MessageServerData} returns this
 */
proto.types.MessageServerData.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.DepositData.prototype.toObject = function(opt_includeInstance) {
  return proto.types.DepositData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.DepositData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.DepositData.toObject = function(includeInstance, msg) {
  var f, obj = {
    verifyAttempts: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lastVerifyAttempt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    depositConfirmation: (f = msg.getDepositConfirmation()) && types_types_pb.DepositConfirmation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.DepositData}
 */
proto.types.DepositData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.DepositData;
  return proto.types.DepositData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.DepositData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.DepositData}
 */
proto.types.DepositData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVerifyAttempts(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastVerifyAttempt(value);
      break;
    case 3:
      var value = new types_types_pb.DepositConfirmation;
      reader.readMessage(value,types_types_pb.DepositConfirmation.deserializeBinaryFromReader);
      msg.setDepositConfirmation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.DepositData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.DepositData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.DepositData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.DepositData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerifyAttempts();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLastVerifyAttempt();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getDepositConfirmation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_types_pb.DepositConfirmation.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 verify_attempts = 1;
 * @return {number}
 */
proto.types.DepositData.prototype.getVerifyAttempts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.DepositData} returns this
 */
proto.types.DepositData.prototype.setVerifyAttempts = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 last_verify_attempt = 2;
 * @return {number}
 */
proto.types.DepositData.prototype.getLastVerifyAttempt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.DepositData} returns this
 */
proto.types.DepositData.prototype.setLastVerifyAttempt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional DepositConfirmation deposit_confirmation = 3;
 * @return {?proto.types.DepositConfirmation}
 */
proto.types.DepositData.prototype.getDepositConfirmation = function() {
  return /** @type{?proto.types.DepositConfirmation} */ (
    jspb.Message.getWrapperField(this, types_types_pb.DepositConfirmation, 3));
};


/**
 * @param {?proto.types.DepositConfirmation|undefined} value
 * @return {!proto.types.DepositData} returns this
*/
proto.types.DepositData.prototype.setDepositConfirmation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.DepositData} returns this
 */
proto.types.DepositData.prototype.clearDepositConfirmation = function() {
  return this.setDepositConfirmation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.DepositData.prototype.hasDepositConfirmation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.Thread.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Thread.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Thread.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Thread} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Thread.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    msgsIdsList: msg.getMsgsIdsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Thread}
 */
proto.types.Thread.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Thread;
  return proto.types.Thread.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Thread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Thread}
 */
proto.types.Thread.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addMsgsIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Thread.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Thread.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Thread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Thread.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMsgsIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.Thread.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.types.Thread.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.types.Thread.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.Thread} returns this
 */
proto.types.Thread.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes msgs_ids = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.types.Thread.prototype.getMsgsIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes msgs_ids = 2;
 * This is a type-conversion wrapper around `getMsgsIdsList()`
 * @return {!Array<string>}
 */
proto.types.Thread.prototype.getMsgsIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getMsgsIdsList()));
};


/**
 * repeated bytes msgs_ids = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgsIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.types.Thread.prototype.getMsgsIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getMsgsIdsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.types.Thread} returns this
 */
proto.types.Thread.prototype.setMsgsIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.types.Thread} returns this
 */
proto.types.Thread.prototype.addMsgsIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.Thread} returns this
 */
proto.types.Thread.prototype.clearMsgsIdsList = function() {
  return this.setMsgsIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.ThreadBox.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.ThreadBox.prototype.toObject = function(opt_includeInstance) {
  return proto.types.ThreadBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.ThreadBox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ThreadBox.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadBoxType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    threadIdsList: msg.getThreadIdsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.ThreadBox}
 */
proto.types.ThreadBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.ThreadBox;
  return proto.types.ThreadBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.ThreadBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.ThreadBox}
 */
proto.types.ThreadBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.types.ThreadBoxType} */ (reader.readEnum());
      msg.setThreadBoxType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addThreadIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.ThreadBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.ThreadBox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.ThreadBox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ThreadBox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadBoxType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getThreadIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional ThreadBoxType thread_box_type = 1;
 * @return {!proto.types.ThreadBoxType}
 */
proto.types.ThreadBox.prototype.getThreadBoxType = function() {
  return /** @type {!proto.types.ThreadBoxType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.types.ThreadBoxType} value
 * @return {!proto.types.ThreadBox} returns this
 */
proto.types.ThreadBox.prototype.setThreadBoxType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated bytes thread_ids = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.types.ThreadBox.prototype.getThreadIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes thread_ids = 2;
 * This is a type-conversion wrapper around `getThreadIdsList()`
 * @return {!Array<string>}
 */
proto.types.ThreadBox.prototype.getThreadIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getThreadIdsList()));
};


/**
 * repeated bytes thread_ids = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.types.ThreadBox.prototype.getThreadIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getThreadIdsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.types.ThreadBox} returns this
 */
proto.types.ThreadBox.prototype.setThreadIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.types.ThreadBox} returns this
 */
proto.types.ThreadBox.prototype.addThreadIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.ThreadBox} returns this
 */
proto.types.ThreadBox.prototype.clearThreadIdsList = function() {
  return this.setThreadIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.MessageContent.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.MessageContent.prototype.toObject = function(opt_includeInstance) {
  return proto.types.MessageContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.MessageContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessageContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: (f = msg.getSubject()) && proto.types.ContentItem.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.types.ContentItem.toObject(includeInstance, f),
    mediaItemsList: jspb.Message.toObjectList(msg.getMediaItemsList(),
    proto.types.ContentItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.MessageContent}
 */
proto.types.MessageContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.MessageContent;
  return proto.types.MessageContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.MessageContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.MessageContent}
 */
proto.types.MessageContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.ContentItem;
      reader.readMessage(value,proto.types.ContentItem.deserializeBinaryFromReader);
      msg.setSubject(value);
      break;
    case 2:
      var value = new proto.types.ContentItem;
      reader.readMessage(value,proto.types.ContentItem.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 3:
      var value = new proto.types.ContentItem;
      reader.readMessage(value,proto.types.ContentItem.deserializeBinaryFromReader);
      msg.addMediaItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.MessageContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.MessageContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.MessageContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessageContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.ContentItem.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.ContentItem.serializeBinaryToWriter
    );
  }
  f = message.getMediaItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.types.ContentItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional ContentItem subject = 1;
 * @return {?proto.types.ContentItem}
 */
proto.types.MessageContent.prototype.getSubject = function() {
  return /** @type{?proto.types.ContentItem} */ (
    jspb.Message.getWrapperField(this, proto.types.ContentItem, 1));
};


/**
 * @param {?proto.types.ContentItem|undefined} value
 * @return {!proto.types.MessageContent} returns this
*/
proto.types.MessageContent.prototype.setSubject = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.MessageContent} returns this
 */
proto.types.MessageContent.prototype.clearSubject = function() {
  return this.setSubject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MessageContent.prototype.hasSubject = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ContentItem body = 2;
 * @return {?proto.types.ContentItem}
 */
proto.types.MessageContent.prototype.getBody = function() {
  return /** @type{?proto.types.ContentItem} */ (
    jspb.Message.getWrapperField(this, proto.types.ContentItem, 2));
};


/**
 * @param {?proto.types.ContentItem|undefined} value
 * @return {!proto.types.MessageContent} returns this
*/
proto.types.MessageContent.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.MessageContent} returns this
 */
proto.types.MessageContent.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MessageContent.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ContentItem media_items = 3;
 * @return {!Array<!proto.types.ContentItem>}
 */
proto.types.MessageContent.prototype.getMediaItemsList = function() {
  return /** @type{!Array<!proto.types.ContentItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.ContentItem, 3));
};


/**
 * @param {!Array<!proto.types.ContentItem>} value
 * @return {!proto.types.MessageContent} returns this
*/
proto.types.MessageContent.prototype.setMediaItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.types.ContentItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.ContentItem}
 */
proto.types.MessageContent.prototype.addMediaItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.types.ContentItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.MessageContent} returns this
 */
proto.types.MessageContent.prototype.clearMediaItemsList = function() {
  return this.setMediaItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.ContentItem.prototype.toObject = function(opt_includeInstance) {
  return proto.types.ContentItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.ContentItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ContentItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    mimeType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    compression: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.ContentItem}
 */
proto.types.ContentItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.ContentItem;
  return proto.types.ContentItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.ContentItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.ContentItem}
 */
proto.types.ContentItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.types.MimeType} */ (reader.readEnum());
      msg.setMimeType(value);
      break;
    case 2:
      var value = /** @type {!proto.types.Compression} */ (reader.readEnum());
      msg.setCompression(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.ContentItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.ContentItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.ContentItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ContentItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMimeType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCompression();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional MimeType mime_type = 1;
 * @return {!proto.types.MimeType}
 */
proto.types.ContentItem.prototype.getMimeType = function() {
  return /** @type {!proto.types.MimeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.types.MimeType} value
 * @return {!proto.types.ContentItem} returns this
 */
proto.types.ContentItem.prototype.setMimeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Compression compression = 2;
 * @return {!proto.types.Compression}
 */
proto.types.ContentItem.prototype.getCompression = function() {
  return /** @type {!proto.types.Compression} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.types.Compression} value
 * @return {!proto.types.ContentItem} returns this
 */
proto.types.ContentItem.prototype.setCompression = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.types.ContentItem.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.types.ContentItem.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.types.ContentItem.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.ContentItem} returns this
 */
proto.types.ContentItem.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.types.ThreadBoxType = {
  THREAD_BOX_TYPE_UNKNOWN: 0,
  THREAD_BOX_TYPE_INBOX: 1,
  THREAD_BOX_TYPE_SENT: 2,
  THREAD_BOX_TYPE_ARCHIVE: 4
};

goog.object.extend(exports, proto.types);
