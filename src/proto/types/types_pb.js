/* eslint-disable */
//@ts-nocheck
// source: types/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.types.Amount', null, global);
goog.exportSymbol('proto.types.Compression', null, global);
goog.exportSymbol('proto.types.DepositConfirmation', null, global);
goog.exportSymbol('proto.types.EthAddress', null, global);
goog.exportSymbol('proto.types.Keypair', null, global);
goog.exportSymbol('proto.types.MessageId', null, global);
goog.exportSymbol('proto.types.MimeType', null, global);
goog.exportSymbol('proto.types.PaidAction', null, global);
goog.exportSymbol('proto.types.PaidActionType', null, global);
goog.exportSymbol('proto.types.Payment', null, global);
goog.exportSymbol('proto.types.PaymentSettings', null, global);
goog.exportSymbol('proto.types.PreKey', null, global);
goog.exportSymbol('proto.types.PreKeys', null, global);
goog.exportSymbol('proto.types.PrivateKey', null, global);
goog.exportSymbol('proto.types.PublicAccountInfo', null, global);
goog.exportSymbol('proto.types.PublicKey', null, global);
goog.exportSymbol('proto.types.ThreadId', null, global);
goog.exportSymbol('proto.types.Token', null, global);
goog.exportSymbol('proto.types.WebResource', null, global);
goog.exportSymbol('proto.types.WebResourcesTypes', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.PublicKey.displayName = 'proto.types.PublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.PrivateKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.PrivateKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.PrivateKey.displayName = 'proto.types.PrivateKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Keypair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Keypair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Keypair.displayName = 'proto.types.Keypair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.EthAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.EthAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.EthAddress.displayName = 'proto.types.EthAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.PreKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.PreKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.PreKey.displayName = 'proto.types.PreKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.PreKeys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.PreKeys.repeatedFields_, null);
};
goog.inherits(proto.types.PreKeys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.PreKeys.displayName = 'proto.types.PreKeys';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Amount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Amount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Amount.displayName = 'proto.types.Amount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.Payment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.Payment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.Payment.displayName = 'proto.types.Payment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.MessageId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.MessageId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.MessageId.displayName = 'proto.types.MessageId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.ThreadId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.ThreadId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.ThreadId.displayName = 'proto.types.ThreadId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.PaidAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.PaidAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.PaidAction.displayName = 'proto.types.PaidAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.PaymentSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.PaymentSettings.repeatedFields_, null);
};
goog.inherits(proto.types.PaymentSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.PaymentSettings.displayName = 'proto.types.PaymentSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.DepositConfirmation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.DepositConfirmation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.DepositConfirmation.displayName = 'proto.types.DepositConfirmation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.PublicAccountInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.PublicAccountInfo.repeatedFields_, null);
};
goog.inherits(proto.types.PublicAccountInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.PublicAccountInfo.displayName = 'proto.types.PublicAccountInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.WebResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.WebResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.types.WebResource.displayName = 'proto.types.WebResource';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.PublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.types.PublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.PublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.PublicKey}
 */
proto.types.PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.PublicKey;
  return proto.types.PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.PublicKey}
 */
proto.types.PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.PublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.PublicKey.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.types.PublicKey.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.types.PublicKey.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.PublicKey} returns this
 */
proto.types.PublicKey.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.PrivateKey.prototype.toObject = function(opt_includeInstance) {
  return proto.types.PrivateKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.PrivateKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PrivateKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.PrivateKey}
 */
proto.types.PrivateKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.PrivateKey;
  return proto.types.PrivateKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.PrivateKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.PrivateKey}
 */
proto.types.PrivateKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.PrivateKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.PrivateKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.PrivateKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PrivateKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.PrivateKey.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.types.PrivateKey.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.types.PrivateKey.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.PrivateKey} returns this
 */
proto.types.PrivateKey.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Keypair.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Keypair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Keypair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Keypair.toObject = function(includeInstance, msg) {
  var f, obj = {
    privateKey: msg.getPrivateKey_asB64(),
    publicKey: msg.getPublicKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Keypair}
 */
proto.types.Keypair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Keypair;
  return proto.types.Keypair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Keypair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Keypair}
 */
proto.types.Keypair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrivateKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Keypair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Keypair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Keypair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Keypair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrivateKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes private_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.Keypair.prototype.getPrivateKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes private_key = 1;
 * This is a type-conversion wrapper around `getPrivateKey()`
 * @return {string}
 */
proto.types.Keypair.prototype.getPrivateKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrivateKey()));
};


/**
 * optional bytes private_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrivateKey()`
 * @return {!Uint8Array}
 */
proto.types.Keypair.prototype.getPrivateKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrivateKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.Keypair} returns this
 */
proto.types.Keypair.prototype.setPrivateKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.Keypair.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes public_key = 2;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.types.Keypair.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.types.Keypair.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.Keypair} returns this
 */
proto.types.Keypair.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.EthAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.types.EthAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.EthAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.EthAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.EthAddress}
 */
proto.types.EthAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.EthAddress;
  return proto.types.EthAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.EthAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.EthAddress}
 */
proto.types.EthAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.EthAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.EthAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.EthAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.EthAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.EthAddress.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytes = 1;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.types.EthAddress.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.types.EthAddress.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.EthAddress} returns this
 */
proto.types.EthAddress.prototype.setBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.PreKey.prototype.toObject = function(opt_includeInstance) {
  return proto.types.PreKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.PreKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PreKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.PreKey}
 */
proto.types.PreKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.PreKey;
  return proto.types.PreKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.PreKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.PreKey}
 */
proto.types.PreKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.PreKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.PreKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.PreKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PreKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.PreKey.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.types.PreKey.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.types.PreKey.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.PreKey} returns this
 */
proto.types.PreKey.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 id = 2;
 * @return {number}
 */
proto.types.PreKey.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.PreKey} returns this
 */
proto.types.PreKey.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.PreKeys.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.PreKeys.prototype.toObject = function(opt_includeInstance) {
  return proto.types.PreKeys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.PreKeys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PreKeys.toObject = function(includeInstance, msg) {
  var f, obj = {
    preKeysList: jspb.Message.toObjectList(msg.getPreKeysList(),
    proto.types.PreKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.PreKeys}
 */
proto.types.PreKeys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.PreKeys;
  return proto.types.PreKeys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.PreKeys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.PreKeys}
 */
proto.types.PreKeys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.PreKey;
      reader.readMessage(value,proto.types.PreKey.deserializeBinaryFromReader);
      msg.addPreKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.PreKeys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.PreKeys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.PreKeys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PreKeys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.types.PreKey.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PreKey pre_keys = 1;
 * @return {!Array<!proto.types.PreKey>}
 */
proto.types.PreKeys.prototype.getPreKeysList = function() {
  return /** @type{!Array<!proto.types.PreKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.PreKey, 1));
};


/**
 * @param {!Array<!proto.types.PreKey>} value
 * @return {!proto.types.PreKeys} returns this
*/
proto.types.PreKeys.prototype.setPreKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.types.PreKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.PreKey}
 */
proto.types.PreKeys.prototype.addPreKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.PreKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.PreKeys} returns this
 */
proto.types.PreKeys.prototype.clearPreKeysList = function() {
  return this.setPreKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Amount.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Amount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Amount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Amount.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Amount}
 */
proto.types.Amount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Amount;
  return proto.types.Amount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Amount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Amount}
 */
proto.types.Amount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.types.Token} */ (reader.readEnum());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Amount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Amount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Amount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Amount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Token token = 1;
 * @return {!proto.types.Token}
 */
proto.types.Amount.prototype.getToken = function() {
  return /** @type {!proto.types.Token} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.types.Token} value
 * @return {!proto.types.Amount} returns this
 */
proto.types.Amount.prototype.setToken = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.types.Amount.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.Amount} returns this
 */
proto.types.Amount.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.Payment.prototype.toObject = function(opt_includeInstance) {
  return proto.types.Payment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.Payment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Payment.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && proto.types.Amount.toObject(includeInstance, f),
    transactionId: msg.getTransactionId_asB64(),
    paidActionType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.Payment}
 */
proto.types.Payment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.Payment;
  return proto.types.Payment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.Payment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.Payment}
 */
proto.types.Payment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.Amount;
      reader.readMessage(value,proto.types.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionId(value);
      break;
    case 3:
      var value = /** @type {!proto.types.PaidActionType} */ (reader.readEnum());
      msg.setPaidActionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.Payment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.Payment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.Payment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.Payment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.Amount.serializeBinaryToWriter
    );
  }
  f = message.getTransactionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPaidActionType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional Amount amount = 1;
 * @return {?proto.types.Amount}
 */
proto.types.Payment.prototype.getAmount = function() {
  return /** @type{?proto.types.Amount} */ (
    jspb.Message.getWrapperField(this, proto.types.Amount, 1));
};


/**
 * @param {?proto.types.Amount|undefined} value
 * @return {!proto.types.Payment} returns this
*/
proto.types.Payment.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.Payment} returns this
 */
proto.types.Payment.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.Payment.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes transaction_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.Payment.prototype.getTransactionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes transaction_id = 2;
 * This is a type-conversion wrapper around `getTransactionId()`
 * @return {string}
 */
proto.types.Payment.prototype.getTransactionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionId()));
};


/**
 * optional bytes transaction_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionId()`
 * @return {!Uint8Array}
 */
proto.types.Payment.prototype.getTransactionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.Payment} returns this
 */
proto.types.Payment.prototype.setTransactionId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional PaidActionType paid_action_type = 3;
 * @return {!proto.types.PaidActionType}
 */
proto.types.Payment.prototype.getPaidActionType = function() {
  return /** @type {!proto.types.PaidActionType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.types.PaidActionType} value
 * @return {!proto.types.Payment} returns this
 */
proto.types.Payment.prototype.setPaidActionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.MessageId.prototype.toObject = function(opt_includeInstance) {
  return proto.types.MessageId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.MessageId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessageId.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageThreadId: msg.getMessageThreadId_asB64(),
    threadId: msg.getThreadId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.MessageId}
 */
proto.types.MessageId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.MessageId;
  return proto.types.MessageId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.MessageId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.MessageId}
 */
proto.types.MessageId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageThreadId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.MessageId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.MessageId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.MessageId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MessageId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageThreadId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getThreadId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes message_thread_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.MessageId.prototype.getMessageThreadId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes message_thread_id = 1;
 * This is a type-conversion wrapper around `getMessageThreadId()`
 * @return {string}
 */
proto.types.MessageId.prototype.getMessageThreadId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageThreadId()));
};


/**
 * optional bytes message_thread_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageThreadId()`
 * @return {!Uint8Array}
 */
proto.types.MessageId.prototype.getMessageThreadId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageThreadId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.MessageId} returns this
 */
proto.types.MessageId.prototype.setMessageThreadId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes thread_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.types.MessageId.prototype.getThreadId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes thread_id = 2;
 * This is a type-conversion wrapper around `getThreadId()`
 * @return {string}
 */
proto.types.MessageId.prototype.getThreadId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadId()));
};


/**
 * optional bytes thread_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadId()`
 * @return {!Uint8Array}
 */
proto.types.MessageId.prototype.getThreadId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.MessageId} returns this
 */
proto.types.MessageId.prototype.setThreadId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.ThreadId.prototype.toObject = function(opt_includeInstance) {
  return proto.types.ThreadId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.ThreadId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ThreadId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.ThreadId}
 */
proto.types.ThreadId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.ThreadId;
  return proto.types.ThreadId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.ThreadId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.ThreadId}
 */
proto.types.ThreadId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.ThreadId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.ThreadId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.ThreadId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ThreadId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.ThreadId.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.types.ThreadId.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.types.ThreadId.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.ThreadId} returns this
 */
proto.types.ThreadId.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.PaidAction.prototype.toObject = function(opt_includeInstance) {
  return proto.types.PaidAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.PaidAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PaidAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    paidActionType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: (f = msg.getPrice()) && proto.types.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.PaidAction}
 */
proto.types.PaidAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.PaidAction;
  return proto.types.PaidAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.PaidAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.PaidAction}
 */
proto.types.PaidAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.types.PaidActionType} */ (reader.readEnum());
      msg.setPaidActionType(value);
      break;
    case 2:
      var value = new proto.types.Amount;
      reader.readMessage(value,proto.types.Amount.deserializeBinaryFromReader);
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.PaidAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.PaidAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.PaidAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PaidAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaidActionType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional PaidActionType paid_action_type = 1;
 * @return {!proto.types.PaidActionType}
 */
proto.types.PaidAction.prototype.getPaidActionType = function() {
  return /** @type {!proto.types.PaidActionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.types.PaidActionType} value
 * @return {!proto.types.PaidAction} returns this
 */
proto.types.PaidAction.prototype.setPaidActionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Amount price = 2;
 * @return {?proto.types.Amount}
 */
proto.types.PaidAction.prototype.getPrice = function() {
  return /** @type{?proto.types.Amount} */ (
    jspb.Message.getWrapperField(this, proto.types.Amount, 2));
};


/**
 * @param {?proto.types.Amount|undefined} value
 * @return {!proto.types.PaidAction} returns this
*/
proto.types.PaidAction.prototype.setPrice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.PaidAction} returns this
 */
proto.types.PaidAction.prototype.clearPrice = function() {
  return this.setPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.PaidAction.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.PaymentSettings.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.PaymentSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.types.PaymentSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.PaymentSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PaymentSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    ethAddress: (f = msg.getEthAddress()) && proto.types.EthAddress.toObject(includeInstance, f),
    paidActionsList: jspb.Message.toObjectList(msg.getPaidActionsList(),
    proto.types.PaidAction.toObject, includeInstance),
    ethSignature: msg.getEthSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.PaymentSettings}
 */
proto.types.PaymentSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.PaymentSettings;
  return proto.types.PaymentSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.PaymentSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.PaymentSettings}
 */
proto.types.PaymentSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.EthAddress;
      reader.readMessage(value,proto.types.EthAddress.deserializeBinaryFromReader);
      msg.setEthAddress(value);
      break;
    case 2:
      var value = new proto.types.PaidAction;
      reader.readMessage(value,proto.types.PaidAction.deserializeBinaryFromReader);
      msg.addPaidActions(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEthSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.PaymentSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.PaymentSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.PaymentSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PaymentSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEthAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.EthAddress.serializeBinaryToWriter
    );
  }
  f = message.getPaidActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.types.PaidAction.serializeBinaryToWriter
    );
  }
  f = message.getEthSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional EthAddress eth_address = 1;
 * @return {?proto.types.EthAddress}
 */
proto.types.PaymentSettings.prototype.getEthAddress = function() {
  return /** @type{?proto.types.EthAddress} */ (
    jspb.Message.getWrapperField(this, proto.types.EthAddress, 1));
};


/**
 * @param {?proto.types.EthAddress|undefined} value
 * @return {!proto.types.PaymentSettings} returns this
*/
proto.types.PaymentSettings.prototype.setEthAddress = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.PaymentSettings} returns this
 */
proto.types.PaymentSettings.prototype.clearEthAddress = function() {
  return this.setEthAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.PaymentSettings.prototype.hasEthAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PaidAction paid_actions = 2;
 * @return {!Array<!proto.types.PaidAction>}
 */
proto.types.PaymentSettings.prototype.getPaidActionsList = function() {
  return /** @type{!Array<!proto.types.PaidAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.PaidAction, 2));
};


/**
 * @param {!Array<!proto.types.PaidAction>} value
 * @return {!proto.types.PaymentSettings} returns this
*/
proto.types.PaymentSettings.prototype.setPaidActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.types.PaidAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.PaidAction}
 */
proto.types.PaymentSettings.prototype.addPaidActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.PaidAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.PaymentSettings} returns this
 */
proto.types.PaymentSettings.prototype.clearPaidActionsList = function() {
  return this.setPaidActionsList([]);
};


/**
 * optional bytes eth_signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.types.PaymentSettings.prototype.getEthSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes eth_signature = 3;
 * This is a type-conversion wrapper around `getEthSignature()`
 * @return {string}
 */
proto.types.PaymentSettings.prototype.getEthSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEthSignature()));
};


/**
 * optional bytes eth_signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEthSignature()`
 * @return {!Uint8Array}
 */
proto.types.PaymentSettings.prototype.getEthSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEthSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.PaymentSettings} returns this
 */
proto.types.PaymentSettings.prototype.setEthSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.DepositConfirmation.prototype.toObject = function(opt_includeInstance) {
  return proto.types.DepositConfirmation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.DepositConfirmation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.DepositConfirmation.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: (f = msg.getMessageId()) && proto.types.MessageId.toObject(includeInstance, f),
    amount: (f = msg.getAmount()) && proto.types.Amount.toObject(includeInstance, f),
    from: (f = msg.getFrom()) && proto.types.EthAddress.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.types.EthAddress.toObject(includeInstance, f),
    blockNum: jspb.Message.getFieldWithDefault(msg, 5, 0),
    blockHash: msg.getBlockHash_asB64(),
    confirmations: jspb.Message.getFieldWithDefault(msg, 7, 0),
    blockTime: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.DepositConfirmation}
 */
proto.types.DepositConfirmation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.DepositConfirmation;
  return proto.types.DepositConfirmation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.DepositConfirmation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.DepositConfirmation}
 */
proto.types.DepositConfirmation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.MessageId;
      reader.readMessage(value,proto.types.MessageId.deserializeBinaryFromReader);
      msg.setMessageId(value);
      break;
    case 2:
      var value = new proto.types.Amount;
      reader.readMessage(value,proto.types.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 3:
      var value = new proto.types.EthAddress;
      reader.readMessage(value,proto.types.EthAddress.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 4:
      var value = new proto.types.EthAddress;
      reader.readMessage(value,proto.types.EthAddress.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockNum(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirmations(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.DepositConfirmation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.DepositConfirmation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.DepositConfirmation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.DepositConfirmation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.MessageId.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.types.Amount.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.types.EthAddress.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.types.EthAddress.serializeBinaryToWriter
    );
  }
  f = message.getBlockNum();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getConfirmations();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getBlockTime();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional MessageId message_id = 1;
 * @return {?proto.types.MessageId}
 */
proto.types.DepositConfirmation.prototype.getMessageId = function() {
  return /** @type{?proto.types.MessageId} */ (
    jspb.Message.getWrapperField(this, proto.types.MessageId, 1));
};


/**
 * @param {?proto.types.MessageId|undefined} value
 * @return {!proto.types.DepositConfirmation} returns this
*/
proto.types.DepositConfirmation.prototype.setMessageId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.DepositConfirmation} returns this
 */
proto.types.DepositConfirmation.prototype.clearMessageId = function() {
  return this.setMessageId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.DepositConfirmation.prototype.hasMessageId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Amount amount = 2;
 * @return {?proto.types.Amount}
 */
proto.types.DepositConfirmation.prototype.getAmount = function() {
  return /** @type{?proto.types.Amount} */ (
    jspb.Message.getWrapperField(this, proto.types.Amount, 2));
};


/**
 * @param {?proto.types.Amount|undefined} value
 * @return {!proto.types.DepositConfirmation} returns this
*/
proto.types.DepositConfirmation.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.DepositConfirmation} returns this
 */
proto.types.DepositConfirmation.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.DepositConfirmation.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EthAddress from = 3;
 * @return {?proto.types.EthAddress}
 */
proto.types.DepositConfirmation.prototype.getFrom = function() {
  return /** @type{?proto.types.EthAddress} */ (
    jspb.Message.getWrapperField(this, proto.types.EthAddress, 3));
};


/**
 * @param {?proto.types.EthAddress|undefined} value
 * @return {!proto.types.DepositConfirmation} returns this
*/
proto.types.DepositConfirmation.prototype.setFrom = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.DepositConfirmation} returns this
 */
proto.types.DepositConfirmation.prototype.clearFrom = function() {
  return this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.DepositConfirmation.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EthAddress to = 4;
 * @return {?proto.types.EthAddress}
 */
proto.types.DepositConfirmation.prototype.getTo = function() {
  return /** @type{?proto.types.EthAddress} */ (
    jspb.Message.getWrapperField(this, proto.types.EthAddress, 4));
};


/**
 * @param {?proto.types.EthAddress|undefined} value
 * @return {!proto.types.DepositConfirmation} returns this
*/
proto.types.DepositConfirmation.prototype.setTo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.DepositConfirmation} returns this
 */
proto.types.DepositConfirmation.prototype.clearTo = function() {
  return this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.DepositConfirmation.prototype.hasTo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 block_num = 5;
 * @return {number}
 */
proto.types.DepositConfirmation.prototype.getBlockNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.DepositConfirmation} returns this
 */
proto.types.DepositConfirmation.prototype.setBlockNum = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes block_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.types.DepositConfirmation.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes block_hash = 6;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.types.DepositConfirmation.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.types.DepositConfirmation.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.DepositConfirmation} returns this
 */
proto.types.DepositConfirmation.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint64 confirmations = 7;
 * @return {number}
 */
proto.types.DepositConfirmation.prototype.getConfirmations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.DepositConfirmation} returns this
 */
proto.types.DepositConfirmation.prototype.setConfirmations = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 block_time = 8;
 * @return {number}
 */
proto.types.DepositConfirmation.prototype.getBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.types.DepositConfirmation} returns this
 */
proto.types.DepositConfirmation.prototype.setBlockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.PublicAccountInfo.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.PublicAccountInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.types.PublicAccountInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.PublicAccountInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PublicAccountInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fullName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    location: jspb.Message.getFieldWithDefault(msg, 3, ""),
    publicKey: (f = msg.getPublicKey()) && proto.types.PublicKey.toObject(includeInstance, f),
    preKey: (f = msg.getPreKey()) && proto.types.PreKey.toObject(includeInstance, f),
    ethName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    profile: jspb.Message.getFieldWithDefault(msg, 7, ""),
    orgName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    position: jspb.Message.getFieldWithDefault(msg, 9, ""),
    profileImageUrl: jspb.Message.getFieldWithDefault(msg, 10, ""),
    smallProfileImageUrl: jspb.Message.getFieldWithDefault(msg, 11, ""),
    customProfileBackgroundImageUrl: jspb.Message.getFieldWithDefault(msg, 12, ""),
    profileUrlsList: jspb.Message.toObjectList(msg.getProfileUrlsList(),
    proto.types.WebResource.toObject, includeInstance),
    paymentSettings: (f = msg.getPaymentSettings()) && proto.types.PaymentSettings.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.PublicAccountInfo}
 */
proto.types.PublicAccountInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.PublicAccountInfo;
  return proto.types.PublicAccountInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.PublicAccountInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.PublicAccountInfo}
 */
proto.types.PublicAccountInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 4:
      var value = new proto.types.PublicKey;
      reader.readMessage(value,proto.types.PublicKey.deserializeBinaryFromReader);
      msg.setPublicKey(value);
      break;
    case 5:
      var value = new proto.types.PreKey;
      reader.readMessage(value,proto.types.PreKey.deserializeBinaryFromReader);
      msg.setPreKey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfile(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrgName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfileImageUrl(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSmallProfileImageUrl(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomProfileBackgroundImageUrl(value);
      break;
    case 13:
      var value = new proto.types.WebResource;
      reader.readMessage(value,proto.types.WebResource.deserializeBinaryFromReader);
      msg.addProfileUrls(value);
      break;
    case 14:
      var value = new proto.types.PaymentSettings;
      reader.readMessage(value,proto.types.PaymentSettings.deserializeBinaryFromReader);
      msg.setPaymentSettings(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.PublicAccountInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.PublicAccountInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.PublicAccountInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.PublicAccountInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFullName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPublicKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.types.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getPreKey();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.types.PreKey.serializeBinaryToWriter
    );
  }
  f = message.getEthName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProfile();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOrgName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPosition();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getProfileImageUrl();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSmallProfileImageUrl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCustomProfileBackgroundImageUrl();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getProfileUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.types.WebResource.serializeBinaryToWriter
    );
  }
  f = message.getPaymentSettings();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.types.PaymentSettings.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.types.PublicAccountInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string full_name = 2;
 * @return {string}
 */
proto.types.PublicAccountInfo.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.setFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string location = 3;
 * @return {string}
 */
proto.types.PublicAccountInfo.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional PublicKey public_key = 4;
 * @return {?proto.types.PublicKey}
 */
proto.types.PublicAccountInfo.prototype.getPublicKey = function() {
  return /** @type{?proto.types.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.types.PublicKey, 4));
};


/**
 * @param {?proto.types.PublicKey|undefined} value
 * @return {!proto.types.PublicAccountInfo} returns this
*/
proto.types.PublicAccountInfo.prototype.setPublicKey = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.clearPublicKey = function() {
  return this.setPublicKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.PublicAccountInfo.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PreKey pre_key = 5;
 * @return {?proto.types.PreKey}
 */
proto.types.PublicAccountInfo.prototype.getPreKey = function() {
  return /** @type{?proto.types.PreKey} */ (
    jspb.Message.getWrapperField(this, proto.types.PreKey, 5));
};


/**
 * @param {?proto.types.PreKey|undefined} value
 * @return {!proto.types.PublicAccountInfo} returns this
*/
proto.types.PublicAccountInfo.prototype.setPreKey = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.clearPreKey = function() {
  return this.setPreKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.PublicAccountInfo.prototype.hasPreKey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string eth_name = 6;
 * @return {string}
 */
proto.types.PublicAccountInfo.prototype.getEthName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.setEthName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string profile = 7;
 * @return {string}
 */
proto.types.PublicAccountInfo.prototype.getProfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.setProfile = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string org_name = 8;
 * @return {string}
 */
proto.types.PublicAccountInfo.prototype.getOrgName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.setOrgName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string position = 9;
 * @return {string}
 */
proto.types.PublicAccountInfo.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string profile_image_url = 10;
 * @return {string}
 */
proto.types.PublicAccountInfo.prototype.getProfileImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.setProfileImageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string small_profile_image_url = 11;
 * @return {string}
 */
proto.types.PublicAccountInfo.prototype.getSmallProfileImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.setSmallProfileImageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string custom_profile_background_image_url = 12;
 * @return {string}
 */
proto.types.PublicAccountInfo.prototype.getCustomProfileBackgroundImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.setCustomProfileBackgroundImageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * repeated WebResource profile_urls = 13;
 * @return {!Array<!proto.types.WebResource>}
 */
proto.types.PublicAccountInfo.prototype.getProfileUrlsList = function() {
  return /** @type{!Array<!proto.types.WebResource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.WebResource, 13));
};


/**
 * @param {!Array<!proto.types.WebResource>} value
 * @return {!proto.types.PublicAccountInfo} returns this
*/
proto.types.PublicAccountInfo.prototype.setProfileUrlsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.types.WebResource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.WebResource}
 */
proto.types.PublicAccountInfo.prototype.addProfileUrls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.types.WebResource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.clearProfileUrlsList = function() {
  return this.setProfileUrlsList([]);
};


/**
 * optional PaymentSettings payment_settings = 14;
 * @return {?proto.types.PaymentSettings}
 */
proto.types.PublicAccountInfo.prototype.getPaymentSettings = function() {
  return /** @type{?proto.types.PaymentSettings} */ (
    jspb.Message.getWrapperField(this, proto.types.PaymentSettings, 14));
};


/**
 * @param {?proto.types.PaymentSettings|undefined} value
 * @return {!proto.types.PublicAccountInfo} returns this
*/
proto.types.PublicAccountInfo.prototype.setPaymentSettings = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.clearPaymentSettings = function() {
  return this.setPaymentSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.PublicAccountInfo.prototype.hasPaymentSettings = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bytes signature = 15;
 * @return {!(string|Uint8Array)}
 */
proto.types.PublicAccountInfo.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes signature = 15;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.types.PublicAccountInfo.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.types.PublicAccountInfo.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.types.PublicAccountInfo} returns this
 */
proto.types.PublicAccountInfo.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.WebResource.prototype.toObject = function(opt_includeInstance) {
  return proto.types.WebResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.WebResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.WebResource.toObject = function(includeInstance, msg) {
  var f, obj = {
    webResourceType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.WebResource}
 */
proto.types.WebResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.WebResource;
  return proto.types.WebResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.WebResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.WebResource}
 */
proto.types.WebResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.types.WebResourcesTypes} */ (reader.readEnum());
      msg.setWebResourceType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.WebResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.WebResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.WebResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.WebResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWebResourceType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional WebResourcesTypes web_resource_type = 1;
 * @return {!proto.types.WebResourcesTypes}
 */
proto.types.WebResource.prototype.getWebResourceType = function() {
  return /** @type {!proto.types.WebResourcesTypes} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.types.WebResourcesTypes} value
 * @return {!proto.types.WebResource} returns this
 */
proto.types.WebResource.prototype.setWebResourceType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.types.WebResource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.WebResource} returns this
 */
proto.types.WebResource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.types.WebResource.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.types.WebResource} returns this
 */
proto.types.WebResource.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.types.Token = {
  TOKEN_ETH: 0,
  TOKEN_USDC: 1,
  TOKEN_USDT: 2,
  TOKEN_DAI: 3
};

/**
 * @enum {number}
 */
proto.types.PaidActionType = {
  PAID_ACTION_TYPE_UNSPECIFIED: 0,
  PAID_ACTION_TYPE_OPEN: 1,
  PAID_ACTION_TYPE_REPLY: 2,
  PAID_ACTION_TYPE_WATCH_VIDEO: 3,
  PAID_ACTION_TYPE_5_MIN_ZOOM: 4,
  PAID_ACTION_TYPE_10_MIN_ZOOM: 5,
  PAID_ACTION_TYPE_20_MIN_ZOOM: 6
};

/**
 * @enum {number}
 */
proto.types.WebResourcesTypes = {
  WEB_RESOURCES_TYPES_UNKNOWN: 0,
  WEB_RESOURCES_TYPES_WEBSITE: 1,
  WEB_RESOURCES_TYPES_TWITTER: 2,
  WEB_RESOURCES_TYPES_TELEGRAM: 3,
  WEB_RESOURCES_TYPES_LINKEDIN: 4
};

/**
 * @enum {number}
 */
proto.types.MimeType = {
  MIME_TYPE_TEXT_UTF8: 0,
  MIME_TYPE_IMAGE_PNG: 1,
  MIME_TYPE_IMAGE_JPG: 2,
  MIME_TYPE_IMAGE_GIF: 3,
  MIME_TYPE_TEXT_MD: 4
};

/**
 * @enum {number}
 */
proto.types.Compression = {
  COMPRESSION_UNCOMPRESSED: 0,
  COMPRESSION_ZIP: 1
};

goog.object.extend(exports, proto.types);
